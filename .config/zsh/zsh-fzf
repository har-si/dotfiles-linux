# FZF Default Command
export FZF_DEFAULT_COMMAND='fd . --color=never --hidden --no-ignore --exclude ".git"'

# Initialize Color Variable
FZF_COLORS="bg+:-1,\
fg:gray,\
fg+:white,\
border:gray,\
spinner:0,\
hl:yellow,\
header:blue,\
info:green,\
pointer:red,\
marker:red,\
prompt:white,\
hl+:red"

# FZF Default Options
export FZF_DEFAULT_OPTS="--multi \
--height=90% \
--min-height=10 \
--margin=3% \
--border=rounded \
--layout=reverse \
--color '$FZF_COLORS' \
--prompt '󰁱 ' \
--pointer='󰁱' \
--marker=''"


# FZF CTRL+T Default Command and Options
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview='p {} "fzf" ${FZF_PREVIEW_COLUMNS} ${FZF_PREVIEW_LINES}' --preview-window='45%,border-rounded'"


# FZF ALT+C Default Command and Options
export FZF_ALT_C_COMMAND='fd --type d . --color=never --hidden'
export FZF_ALT_C_OPTS="--preview='p {} "fzf" ${FZF_PREVIEW_COLUMNS} ${FZF_PREVIEW_LINES}' --preview-window='45%,border-rounded'"


export FZF_COMPLETION_DIR_COMMANDS="cd pushd rmdir tree ls"



# Sourching fzf for zsh 
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/shell/key-bindings.zsh ] && source /usr/share/fzf/shell/key-bindings.zsh
[ -f /usr/share/doc/fzf/examples/completion.zsh ] && source /usr/share/doc/fzf/examples/completion.zsh
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f $ZDOTDIR/completion/_fnm ] && fpath+="$ZDOTDIR/completion/"


# FZF File Manager Functions
# concept from https://thevaluable.dev/practical-guide-fzf-example/

# Default: Directories
function d() {

  local queryargd
  queryargd=$(echo "$@")  

  # store the stdout of fzf in a variable
  selection=$(fd --type d --color=never --hidden --no-ignore --exclude ".git" | fzf --multi --height=90% --border=rounded \
  --preview='p {} "fzf" ${FZF_PREVIEW_COLUMNS} ${FZF_PREVIEW_LINES}' \
  --preview-window='45%,border-rounded' \
  --prompt='Dirs 󰁱 ' \
  --bind='del:become(rm -rI {+})' \
  --bind='ctrl-y:become(wl-copy {+}; echo Copied to Clipboard: {+})' \
  --bind='ctrl-p:toggle-preview' \
  --bind='ctrl-d:change-prompt(Dirs 󰁱 )' \
  --bind='ctrl-d:+reload(find -type d)' \
  --bind='ctrl-d:+refresh-preview' \
  --bind='ctrl-f:change-prompt(Files 󰁱 )' \
  --bind='ctrl-f:+reload(fd --type f --color=never --hidden --no-ignore --exclude ".git")' \
  --bind='ctrl-f:+refresh-preview' \
  --bind='ctrl-a:select-all' \
  --bind='ctrl-x:deselect-all' \
  --query="$queryargd" \
  --header-first \
  --header ' C-d:Dirs | C-f:Files | C-p:Preview
 C-a:All | C-x:None | C-y:Copy | DEL
    '
  )

  # determine what to do depending on the selection
  if [ -z "$selection" ]; then
      return
  elif [[ "$selection" = "Copied to Clipboard:"* ]]; then
      echo $selection
  elif [ -d "$selection" ]; then
      cd "$selection" || return
  else
      xdg-open "$selection"
  fi
  
}


# Default: Files
function f() {

  local queryargf
  queryargf=$(echo "$@")  

  # store the stdout of fzf in a variable
  selection=$(fd --type f --color=never --hidden --no-ignore --exclude ".git" | fzf --multi --height=90% --border=rounded \
  --preview='p {} "fzf" ${FZF_PREVIEW_COLUMNS} ${FZF_PREVIEW_LINES}' \
  --preview-window='45%,border-rounded' \
  --prompt='Files 󰁱 ' \
  --bind='del:become(rm -rI {+})' \
  --bind='ctrl-y:become(wl-copy {+}; echo Copied to Clipboard: {+})' \
  --bind='ctrl-p:toggle-preview' \
  --bind='ctrl-d:change-prompt(Dirs 󰁱 )' \
  --bind='ctrl-d:+reload(find -type d)' \
  --bind='ctrl-d:+refresh-preview' \
  --bind='ctrl-f:change-prompt(Files 󰁱 )' \
  --bind='ctrl-f:+reload(fd --type f --color=never --hidden --no-ignore --exclude ".git")' \
  --bind='ctrl-f:+refresh-preview' \
  --bind='ctrl-a:select-all' \
  --bind='ctrl-x:deselect-all' \
  --query="$queryargf" \
  --header-first \
  --header ' C-d:Dirs | C-f:Files | C-p:Preview
 C-a:All | C-x:None | C-y:Copy | DEL
    '
  )


  # determine what to do depending on the selection
  if [ -z "$selection" ]; then
      return
  elif [[ "$selection" = "Copied to Clipboard:"* ]]; then
      echo $selection
  elif [ -d "$selection" ]; then
      cd "$selection" || return
  else
      xdg-open "$selection"
  fi
  
}

