#!/bin/sh

## autoload vcs and colors
autoload -Uz vcs_info
autoload -U colors && colors

# enable only git 
zstyle ':vcs_info:*' enable git 

# setup a hook that runs before every prompt. 
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst

# add a function to check for untracked files in the directory.
# from https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
# 
+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[staged]+='!' # signify new files with a bang
    fi
}

zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:git:*' formats " %{$fg[blue]%}(%{$fg[red]%}%m%u%c%{$fg[yellow]%}%{$fg[magenta]%} %b%{$fg[blue]%})"


# Function to display commands runtime timer in right prompt
# https://gist.github.com/knadh/123bca5cfdae8645db750bfb49cb44b0?permalink_comment_id=3556104#gistcomment-3556104
{
    setopt prompt_subst

    function preexec() {
      cmd_start=$(($(print -P %D{%s%6.}) / 1000))
    }

    function precmd() {
      if [ $cmd_start ]; then
        local now=$(($(print -P %D{%s%6.}) / 1000))
        local d_ms=$(($now - $cmd_start))
        local d_s=$((d_ms / 1000))
        local ms=$((d_ms % 1000))
        local s=$((d_s % 60))
        local m=$(((d_s / 60) % 60))
        local h=$((d_s / 3600))

        if   ((h > 0)); then cmd_time=${h}h${m}m
        elif ((m > 0)); then cmd_time=${m}m${s}s
        elif ((s > 9)); then cmd_time=${s}.$(printf %03d $ms | cut -c1-2)s # 12.34s
        elif ((s > 0)); then cmd_time=${s}.$(printf %03d $ms)s # 1.234s
        else cmd_time=${ms}ms
        fi

        unset cmd_start
      else
        # Clear previous result when hitting Return with no command to execute
        unset cmd_time
      fi
    }
}


NEWLINE=$'\n'       #new line variable

# Main Prompt
PROMPT="%F{8}${(r:$COLUMNS::-:)}%f${NEWLINE}"       #Draw a line at the start of each prompt
PROMPT+="%B%{$fg[blue]%}[%{$fg[red]%}%n%{$fg[blue]%}󰁥%{$fg[red]%}%m%{$fg[blue]%}] %{$fg[cyan]%} %1~%{$reset_color%}"
PROMPT+="\$vcs_info_msg_0_ "    #Append the git status info function 
PROMPT+="${NEWLINE}"
PROMPT+="%(?:%{$fg_bold[green]%}󰁱 :%{$fg_bold[red]%}󰁱 )"  #Append the arrow icon with last command status


# Right Prompt
RPROMPT='%{$(echotc UP 1)%}'    #command to move right prompt oneline above (buggy)
RPROMPT+='%F{8}$(if [ $cmd_time ]; then echo "󱦟 $cmd_time"; fi)%F{none}'    #append timer function
RPROMPT+="%F{8} %t%f"
RPROMPT+="%{$(echotc DO 1)%}"   #command to move right prompt oneline above


